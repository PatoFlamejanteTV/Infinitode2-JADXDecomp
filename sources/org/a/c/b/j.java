package org.a.c.b;

import com.badlogic.gdx.net.HttpRequestHeader;
import com.badlogic.gdx.net.HttpResponseHeader;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

/* loaded from: infinitode-2.jar:org/a/c/b/j.class */
public final class j extends b implements Comparable<j> {
    private static Map<String, j> eh = new ConcurrentHashMap(8192);
    private static Map<String, j> ei = new HashMap(768);

    /* renamed from: a, reason: collision with root package name */
    public static final j f4368a = new j("A");

    /* renamed from: b, reason: collision with root package name */
    public static final j f4369b = new j("AA");
    public static final j c;
    public static final j d;
    public static final j e;
    public static final j f;
    public static final j g;
    public static final j h;
    public static final j i;
    public static final j j;
    public static final j k;
    public static final j l;
    public static final j m;
    public static final j n;
    public static final j o;
    public static final j p;
    public static final j q;
    public static final j r;
    public static final j s;
    public static final j t;
    public static final j u;
    public static final j v;
    public static final j w;
    public static final j x;
    public static final j y;
    public static final j z;
    public static final j A;
    public static final j B;
    public static final j C;
    public static final j D;
    public static final j E;
    public static final j F;
    public static final j G;
    public static final j H;
    public static final j I;
    public static final j J;
    public static final j K;
    public static final j L;
    public static final j M;
    public static final j N;
    public static final j O;
    public static final j P;
    public static final j Q;
    public static final j R;
    public static final j S;
    public static final j T;
    public static final j U;
    public static final j V;
    public static final j W;
    public static final j X;
    public static final j Y;
    public static final j Z;
    public static final j aa;
    public static final j ab;
    public static final j ac;
    public static final j ad;
    public static final j ae;
    public static final j af;
    public static final j ag;
    public static final j ah;
    public static final j ai;
    public static final j aj;
    public static final j ak;
    public static final j al;
    public static final j am;
    public static final j an;
    public static final j ao;
    public static final j ap;
    public static final j aq;
    public static final j ar;
    public static final j as;
    public static final j at;
    public static final j au;
    public static final j av;
    public static final j aw;
    public static final j ax;
    public static final j ay;
    public static final j az;
    public static final j aA;
    public static final j aB;
    public static final j aC;
    public static final j aD;
    public static final j aE;
    public static final j aF;
    public static final j aG;
    public static final j aH;
    public static final j aI;
    public static final j aJ;
    public static final j aK;
    public static final j aL;
    public static final j aM;
    public static final j aN;
    public static final j aO;
    public static final j aP;
    public static final j aQ;
    public static final j aR;
    public static final j aS;
    public static final j aT;
    public static final j aU;
    public static final j aV;
    public static final j aW;
    public static final j aX;
    public static final j aY;
    public static final j aZ;
    public static final j ba;
    public static final j bb;
    public static final j bc;
    public static final j bd;
    public static final j be;
    public static final j bf;
    public static final j bg;
    public static final j bh;
    public static final j bi;
    public static final j bj;
    public static final j bk;
    public static final j bl;
    public static final j bm;
    public static final j bn;
    public static final j bo;
    public static final j bp;
    public static final j bq;
    public static final j br;
    public static final j bs;
    public static final j bt;
    public static final j bu;
    public static final j bv;
    public static final j bw;
    public static final j bx;
    public static final j by;
    public static final j bz;
    public static final j bA;
    public static final j bB;
    public static final j bC;
    public static final j bD;
    public static final j bE;
    public static final j bF;
    public static final j bG;
    public static final j bH;
    public static final j bI;
    public static final j bJ;
    public static final j bK;
    public static final j bL;
    public static final j bM;
    public static final j bN;
    public static final j bO;
    public static final j bP;
    public static final j bQ;
    public static final j bR;
    public static final j bS;
    public static final j bT;
    public static final j bU;
    public static final j bV;
    public static final j bW;
    public static final j bX;
    public static final j bY;
    public static final j bZ;
    public static final j ca;
    public static final j cb;
    public static final j cc;
    public static final j cd;
    public static final j ce;
    public static final j cf;
    public static final j cg;
    public static final j ch;
    public static final j ci;
    public static final j cj;
    public static final j ck;
    public static final j cl;
    public static final j cm;
    public static final j cn;
    public static final j co;
    public static final j cp;
    public static final j cq;
    public static final j cr;
    public static final j cs;
    public static final j ct;
    public static final j cu;
    public static final j cv;
    public static final j cw;
    public static final j cx;
    public static final j cy;
    public static final j cz;
    public static final j cA;
    public static final j cB;
    public static final j cC;
    public static final j cD;
    public static final j cE;
    public static final j cF;
    public static final j cG;
    public static final j cH;
    public static final j cI;
    public static final j cJ;
    public static final j cK;
    public static final j cL;
    public static final j cM;
    public static final j cN;
    public static final j cO;
    public static final j cP;
    public static final j cQ;
    public static final j cR;
    public static final j cS;
    public static final j cT;
    public static final j cU;
    public static final j cV;
    public static final j cW;
    public static final j cX;
    public static final j cY;
    public static final j cZ;
    public static final j da;
    public static final j db;
    public static final j dc;
    public static final j dd;
    public static final j de;
    public static final j df;
    public static final j dg;
    public static final j dh;
    public static final j di;
    public static final j dj;
    public static final j dk;
    public static final j dl;
    public static final j dm;
    public static final j dn;

    /* renamed from: do, reason: not valid java name */
    public static final j f0do;
    public static final j dp;
    public static final j dq;
    public static final j dr;
    public static final j ds;
    public static final j dt;
    public static final j du;
    public static final j dv;
    public static final j dw;
    public static final j dx;
    public static final j dy;
    public static final j dz;
    public static final j dA;
    public static final j dB;
    public static final j dC;
    public static final j dD;
    public static final j dE;
    public static final j dF;
    public static final j dG;
    public static final j dH;
    public static final j dI;
    public static final j dJ;
    public static final j dK;
    public static final j dL;
    public static final j dM;
    public static final j dN;
    public static final j dO;
    public static final j dP;
    public static final j dQ;
    public static final j dR;
    public static final j dS;
    public static final j dT;
    public static final j dU;
    public static final j dV;
    public static final j dW;
    public static final j dX;
    public static final j dY;
    public static final j dZ;
    public static final j ea;
    public static final j eb;
    public static final j ec;
    public static final j ed;
    public static final j ee;
    public static final j ef;
    public static final j eg;
    private final String ej;
    private final int ek;

    static {
        new j("AC");
        c = new j("AcroForm");
        new j("ActualText");
        new j("adbe.pkcs7.detached");
        new j("adbe.pkcs7.sha1");
        new j("adbe.x509.rsa_sha1");
        new j("Adobe.PPKLite");
        d = new j("AESV2");
        e = new j("AESV3");
        new j("After");
        new j("AIS");
        new j("AllOff");
        new j("AllOn");
        f = new j("Alt");
        new j("Alpha");
        g = new j("Alternate");
        h = new j("Annot");
        i = new j("Annots");
        new j("AntiAlias");
        new j("AnyOff");
        new j("AnyOn");
        j = new j("AP");
        new j("APRef");
        new j("App");
        new j("ArtBox");
        k = new j("Artifact");
        l = new j("AS");
        m = new j("Ascent");
        n = new j("ASCIIHexDecode");
        o = new j("AHx");
        p = new j("ASCII85Decode");
        q = new j("A85");
        new j("Attached");
        r = new j("Author");
        s = new j("AvgWidth");
        new j("B");
        t = new j("Background");
        u = new j("BaseEncoding");
        v = new j("BaseFont");
        new j("BaseState");
        w = new j("BBox");
        x = new j("BC");
        new j("BE");
        new j("Before");
        y = new j("BG");
        z = new j("BitsPerComponent");
        new j("BitsPerCoordinate");
        new j("BitsPerFlag");
        A = new j("BitsPerSample");
        B = new j("BlackIs1");
        new j("BlackPoint");
        new j("BleedBox");
        new j("BM");
        new j("Border");
        C = new j("Bounds");
        D = new j("BPC");
        E = new j("BS");
        F = new j("Btn");
        G = new j("ByteRange");
        new j("C");
        H = new j("C0");
        I = new j("C1");
        J = new j("CA");
        new j("ca");
        K = new j("CalGray");
        L = new j("CalRGB");
        new j("Cap");
        M = new j("CapHeight");
        N = new j("Catalog");
        O = new j("CCITTFaxDecode");
        P = new j("CCF");
        new j("CenterWindow");
        new j("Cert");
        Q = new j("CF");
        R = new j("CFM");
        S = new j("Ch");
        T = new j("CharProcs");
        U = new j("CharSet");
        new j("CICI.SignIt");
        V = new j("CIDFontType0");
        W = new j("CIDFontType2");
        X = new j("CIDToGIDMap");
        Y = new j("CIDSet");
        Z = new j("CIDSystemInfo");
        new j("CL");
        new j("ClrF");
        new j("ClrFf");
        new j("CMap");
        new j("CMapName");
        new j("CMYK");
        new j("CO");
        new j("Color");
        new j("Collection");
        new j("ColorBurn");
        new j("ColorDodge");
        aa = new j("Colorants");
        ab = new j("Colors");
        ac = new j("ColorSpace");
        ad = new j("Columns");
        new j("Compatible");
        ae = new j("Components");
        new j("ContactInfo");
        af = new j("Contents");
        new j("Coords");
        ag = new j("Count");
        new j("CP");
        ah = new j("CreationDate");
        ai = new j("Creator");
        aj = new j("CropBox");
        ak = new j("Crypt");
        al = new j("CS");
        am = new j("D");
        an = new j("DA");
        new j("Darken");
        new j("Date");
        ao = new j("DCTDecode");
        ap = new j("DCT");
        aq = new j("Decode");
        ar = new j("DecodeParms");
        new j("default");
        as = new j("DefaultCMYK");
        at = new j("DefaultCryptFilter");
        au = new j("DefaultGray");
        av = new j("DefaultRGB");
        new j("Desc");
        aw = new j("DescendantFonts");
        ax = new j("Descent");
        ay = new j("Dest");
        az = new j("DestOutputProfile");
        new j("Dests");
        aA = new j("DeviceCMYK");
        aB = new j("DeviceGray");
        aC = new j("DeviceN");
        aD = new j("DeviceRGB");
        new j("Di");
        new j("Difference");
        aE = new j("Differences");
        new j("DigestMethod");
        new j("RIPEMD160");
        new j("SHA1");
        new j("SHA256");
        new j("SHA384");
        new j("SHA512");
        new j("Direction");
        aF = new j("DisplayDocTitle");
        new j("DL");
        new j("Dm");
        new j("Doc");
        aG = new j("DocChecksum");
        aH = new j("DocTimeStamp");
        new j("DocMDP");
        new j("Document");
        aI = new j("Domain");
        new j("DOS");
        aJ = new j("DP");
        aK = new j("DR");
        new j("DS");
        new j("Duplex");
        new j("Dur");
        aL = new j("DV");
        aM = new j("DW");
        aN = new j("DW2");
        new j("E");
        aO = new j("EarlyChange");
        new j("EF");
        new j("EmbeddedFDFs");
        new j("EmbeddedFiles");
        new j("");
        aP = new j("Encode");
        aQ = new j("EncodedByteAlign");
        aR = new j("Encoding");
        new j("90ms-RKSJ-H");
        new j("90ms-RKSJ-V");
        new j("ETen-B5-H");
        new j("ETen-B5-V");
        aS = new j("Encrypt");
        aT = new j("EncryptMetadata");
        new j("EndOfLine");
        new j("Entrust.PPKEF");
        new j("Exclusion");
        new j("ExtGState");
        new j("Extend");
        new j("Extends");
        aU = new j("F");
        new j("FDecodeParms");
        new j("FFilter");
        new j("FB");
        new j("FDF");
        aV = new j("Ff");
        aW = new j("Fields");
        aX = new j("Filespec");
        aY = new j("Filter");
        aZ = new j("First");
        ba = new j("FirstChar");
        new j("FitWindow");
        new j("FL");
        bb = new j("Flags");
        bc = new j("FlateDecode");
        bd = new j("Fl");
        new j("Folders");
        be = new j("Font");
        bf = new j("FontBBox");
        bg = new j("FontDescriptor");
        bh = new j("FontFamily");
        bi = new j("FontFile");
        bj = new j("FontFile2");
        bk = new j("FontFile3");
        bl = new j("FontMatrix");
        bm = new j("FontName");
        new j("FontStretch");
        bn = new j("FontWeight");
        bo = new j("Form");
        bp = new j("FormType");
        new j("FRM");
        bq = new j("FT");
        br = new j("Function");
        bs = new j("FunctionType");
        bt = new j("Functions");
        new j("G");
        bu = new j("Gamma");
        new j("Group");
        bv = new j("GTS_PDFA1");
        bw = new j("H");
        new j("HardLight");
        bx = new j("Height");
        new j("Helv");
        new j("HideMenubar");
        new j("HideToolbar");
        new j("HideWindowUI");
        new j("Hue");
        by = new j("I");
        new j("IC");
        bz = new j("ICCBased");
        bA = new j("ID");
        new j("IDTree");
        bB = new j("Identity");
        bC = new j("Identity-H");
        bD = new j("Identity-V");
        new j("IF");
        new j("IM");
        bE = new j("Image");
        bF = new j("ImageMask");
        bG = new j("Index");
        bH = new j("Indexed");
        bI = new j("Info");
        new j("InkList");
        bJ = new j("Interpolate");
        new j("IT");
        bK = new j("ItalicAngle");
        new j("Issuer");
        new j("IX");
        new j("JavaScript");
        bL = new j("JBIG2Decode");
        bM = new j("JBIG2Globals");
        bN = new j("JPXDecode");
        bO = new j("JS");
        bP = new j("K");
        bQ = new j("Keywords");
        new j("KeyUsage");
        bR = new j("Kids");
        bS = new j("L");
        bT = new j("Lab");
        bU = new j("Lang");
        bV = new j("Last");
        bW = new j("LastChar");
        new j("LastModified");
        new j("LC");
        new j("LE");
        new j("Leading");
        new j("LegalAttestation");
        bX = new j("Length");
        bY = new j("Length1");
        bZ = new j("Length2");
        new j("Lighten");
        new j("Limits");
        new j("LJ");
        new j("LL");
        new j("LLE");
        new j("LLO");
        new j(HttpResponseHeader.Location);
        new j("Luminosity");
        new j("LW");
        ca = new j("LZWDecode");
        cb = new j("LZW");
        new j("M");
        new j("Mac");
        cc = new j("MacExpertEncoding");
        cd = new j("MacRomanEncoding");
        ce = new j("MarkInfo");
        new j("Mask");
        cf = new j("Matrix");
        new j("Matte");
        cg = new j("MaxLen");
        new j("MaxWidth");
        ch = new j("MCID");
        new j("MDP");
        ci = new j("MediaBox");
        new j("Measure");
        cj = new j("Metadata");
        ck = new j("MissingWidth");
        new j("Mix");
        cl = new j("MK");
        new j("ML");
        cm = new j("MMType1");
        cn = new j("ModDate");
        new j("Multiply");
        co = new j("N");
        cp = new j("Name");
        new j("Names");
        new j("Navigator");
        cq = new j("NeedAppearances");
        new j("NewWindow");
        cr = new j("Next");
        new j("NM");
        new j("NonEFontNoWarn");
        new j("NonFullScreenPageMode");
        new j("None");
        new j("Normal");
        cs = new j("Nums");
        ct = new j("O");
        cu = new j("Obj");
        cv = new j("ObjStm");
        new j("OC");
        cw = new j("OCG");
        cx = new j("OCGs");
        cy = new j("OCMD");
        cz = new j("OCProperties");
        cA = new j("OE");
        new j("OID");
        new j("OFF");
        cB = new j("Off");
        new j("ON");
        new j("OP");
        new j("op");
        new j("OpenAction");
        new j("OpenType");
        new j("OPM");
        cC = new j("Opt");
        new j("Order");
        cD = new j("Ordering");
        new j("OS");
        cE = new j("Outlines");
        cF = new j("OutputCondition");
        cG = new j("OutputConditionIdentifier");
        cH = new j("OutputIntent");
        cI = new j("OutputIntents");
        new j("Overlay");
        cJ = new j("P");
        cK = new j("Page");
        new j("PageLabels");
        new j("PageLayout");
        new j("PageMode");
        cL = new j("Pages");
        new j("PaintType");
        cM = new j("Panose");
        new j("Params");
        cN = new j("Parent");
        cO = new j("ParentTree");
        cP = new j("ParentTreeNextKey");
        new j("Path");
        cQ = new j("Pattern");
        new j("PatternType");
        new j("PDFDocEncoding");
        cR = new j("Perms");
        cS = new j("Pg");
        new j("PreRelease");
        cT = new j("Predictor");
        cU = new j("Prev");
        new j("PrintArea");
        new j("PrintClip");
        new j("PrintScaling");
        new j("ProcSet");
        cV = new j("Process");
        cW = new j("Producer");
        new j("Prop_Build");
        cX = new j("Properties");
        new j("PS");
        new j("PubSec");
        cY = new j("Q");
        cZ = new j("QuadPoints");
        da = new j("R");
        db = new j(HttpRequestHeader.Range);
        new j("RC");
        new j("RD");
        new j("Reason");
        new j("Reasons");
        new j("Repeat");
        dc = new j("Recipients");
        dd = new j("Rect");
        de = new j("Registry");
        df = new j("RegistryName");
        new j("Rename");
        dg = new j("Resources");
        new j("RGB");
        new j("RI");
        dh = new j("RoleMap");
        di = new j("Root");
        dj = new j("Rotate");
        dk = new j("Rows");
        dl = new j("RunLengthDecode");
        dm = new j("RL");
        new j("RV");
        dn = new j("S");
        new j("SA");
        new j("Saturation");
        new j("Schema");
        new j("Screen");
        f0do = new j("SE");
        dp = new j("Separation");
        new j("SetF");
        new j("SetFf");
        new j("Shading");
        new j("ShadingType");
        dq = new j("Sig");
        new j("SigFlags");
        dr = new j("Size");
        new j("SM");
        ds = new j("SMask");
        new j("SoftLight");
        new j("Sort");
        new j("Sound");
        new j("Split");
        new j("SS");
        new j("St");
        dt = new j("StandardEncoding");
        new j("State");
        new j("StateModel");
        new j(HttpResponseHeader.Status);
        du = new j("StdCF");
        new j("StemH");
        dv = new j("StemV");
        dw = new j("StmF");
        dx = new j("StrF");
        new j("StructElem");
        dy = new j("StructParent");
        dz = new j("StructParents");
        dA = new j("StructTreeRoot");
        dB = new j("Style");
        dC = new j("SubFilter");
        new j("Subj");
        dD = new j("Subject");
        new j("SubjectDN");
        dE = new j("Subtype");
        dF = new j("Supplement");
        new j("SV");
        new j("SVCert");
        new j("SW");
        new j("Sy");
        new j("Synchronous");
        dG = new j("T");
        new j("Target");
        new j("Templates");
        new j("Threads");
        new j("Thumb");
        dH = new j("TI");
        new j("TilingType");
        new j("TimeStamp");
        dI = new j("Title");
        new j("TK");
        new j("TM");
        dJ = new j("ToUnicode");
        new j("TR");
        new j("TR2");
        new j("Trapped");
        new j("Trans");
        new j("Transparency");
        new j("TRef");
        new j("TrimBox");
        dK = new j("TrueType");
        new j("TrustedMode");
        dL = new j("TU");
        dM = new j("Tx");
        dN = new j("Type");
        dO = new j("Type0");
        dP = new j("Type1");
        dQ = new j("Type3");
        dR = new j("U");
        dS = new j("UE");
        new j("UF");
        new j("Unchanged");
        new j("Unix");
        dT = new j("URI");
        new j("URL");
        new j("URLType");
        dU = new j("V");
        new j("VE");
        new j("VeriSign.PPKVS");
        dV = new j("Version");
        new j("Vertices");
        new j("VerticesPerRow");
        new j("View");
        new j("ViewArea");
        new j("ViewClip");
        dW = new j("ViewerPreferences");
        new j("Volume");
        new j("VP");
        dX = new j("W");
        dY = new j("W2");
        dZ = new j("WhitePoint");
        new j("Widget");
        ea = new j("Width");
        eb = new j("Widths");
        ec = new j("WinAnsiEncoding");
        new j("XFA");
        new j("XStep");
        ed = new j("XHeight");
        ee = new j("XObject");
        ef = new j("XRef");
        eg = new j("XRefStm");
        new j("YStep");
        new j("Yes");
        new j("ZaDb");
    }

    public static j a(String str) {
        j jVar = null;
        if (str != null) {
            j jVar2 = ei.get(str);
            jVar = jVar2;
            if (jVar2 == null) {
                j jVar3 = eh.get(str);
                jVar = jVar3;
                if (jVar3 == null) {
                    jVar = new j(str, false);
                }
            }
        }
        return jVar;
    }

    private j(String str, boolean z2) {
        this.ej = str;
        if (z2) {
            ei.put(str, this);
        } else {
            eh.put(str, this);
        }
        this.ek = this.ej.hashCode();
    }

    private j(String str) {
        this(str, true);
    }

    public final String a() {
        return this.ej;
    }

    public final String toString() {
        return "COSName{" + this.ej + "}";
    }

    public final boolean equals(Object obj) {
        return (obj instanceof j) && this.ej.equals(((j) obj).ej);
    }

    public final int hashCode() {
        return this.ek;
    }

    @Override // java.lang.Comparable
    /* renamed from: a, reason: merged with bridge method [inline-methods] */
    public final int compareTo(j jVar) {
        return this.ej.compareTo(jVar.ej);
    }

    @Override // org.a.c.b.b
    public final Object a(u uVar) {
        return uVar.a(this);
    }

    public final void a(OutputStream outputStream) {
        outputStream.write(47);
        for (byte b2 : a().getBytes(org.a.c.i.a.f)) {
            int i2 = b2 & 255;
            if ((i2 >= 65 && i2 <= 90) || ((i2 >= 97 && i2 <= 122) || ((i2 >= 48 && i2 <= 57) || i2 == 43 || i2 == 45 || i2 == 95 || i2 == 64 || i2 == 42 || i2 == 36 || i2 == 59 || i2 == 46))) {
                outputStream.write(i2);
            } else {
                outputStream.write(35);
                org.a.c.i.c.a(b2, outputStream);
            }
        }
    }
}
